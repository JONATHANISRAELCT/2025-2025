
// EJERCICIO 4: Lista con 50 números aleatorios, eliminar fuera de rango


using System;
using System.Collections.Generic;

class Nodo
{
    public int Valor;
    public Nodo Siguiente;

    public Nodo(int valor)
    {
        Valor = valor;
        Siguiente = null;
    }
}

class ListaEnlazada
{
    private Nodo cabeza;

    public void Agregar(int valor)
    {
        Nodo nuevo = new Nodo(valor);
        if (cabeza == null)
            cabeza = nuevo;
        else
        {
            Nodo temp = cabeza;
            while (temp.Siguiente != null)
                temp = temp.Siguiente;
            temp.Siguiente = nuevo;
        }
    }

    public void EliminarFueraDeRango(int minimo, int maximo)
    {
        while (cabeza != null && (cabeza.Valor < minimo || cabeza.Valor > maximo))
            cabeza = cabeza.Siguiente;

        Nodo actual = cabeza;
        while (actual != null && actual.Siguiente != null)
        {
            if (actual.Siguiente.Valor < minimo || actual.Siguiente.Valor > maximo)
                actual.Siguiente = actual.Siguiente.Siguiente;
            else
                actual = actual.Siguiente;
        }
    }

    public void Mostrar()
    {
        Nodo temp = cabeza;
        while (temp != null)
        {
            Console.Write(temp.Valor + " ");
            temp = temp.Siguiente;
        }
        Console.WriteLine();
    }
}


// EJERCICIO 7: Registro de vehículos con listas enlazadas


class Vehiculo
{
    public string Placa, Marca, Modelo;
    public int Año;
    public double Precio;
    public Vehiculo Siguiente;
}

class ListaVehiculos
{
    private Vehiculo cabeza;

    public void AgregarVehiculo(string placa, string marca, string modelo, int año, double precio)
    {
        Vehiculo nuevo = new Vehiculo { Placa = placa, Marca = marca, Modelo = modelo, Año = año, Precio = precio };
        if (cabeza == null)
            cabeza = nuevo;
        else
        {
            Vehiculo temp = cabeza;
            while (temp.Siguiente != null)
                temp = temp.Siguiente;
            temp.Siguiente = nuevo;
        }
    }

    public void BuscarPorPlaca(string placa)
    {
        Vehiculo temp = cabeza;
        while (temp != null)
        {
            if (temp.Placa == placa)
            {
                MostrarVehiculo(temp);
                return;
            }
            temp = temp.Siguiente;
        }
        Console.WriteLine("Vehículo no encontrado.");
    }

    public void VerPorAño(int año)
    {
        Vehiculo temp = cabeza;
        bool encontrado = false;
        while (temp != null)
        {
            if (temp.Año == año)
            {
                MostrarVehiculo(temp);
                encontrado = true;
            }
            temp = temp.Siguiente;
        }
        if (!encontrado)
            Console.WriteLine("No hay vehículos registrados de ese año.");
    }

    public void VerTodos()
    {
        Vehiculo temp = cabeza;
        if (temp == null)
        {
            Console.WriteLine("No hay vehículos registrados.");
            return;
        }
        while (temp != null)
        {
            MostrarVehiculo(temp);
            temp = temp.Siguiente;
        }
    }

    public void EliminarPorPlaca(string placa)
    {
        if (cabeza == null) return;

        if (cabeza.Placa == placa)
        {
            cabeza = cabeza.Siguiente;
            Console.WriteLine("Vehículo eliminado.");
            return;
        }

        Vehiculo actual = cabeza;
        while (actual.Siguiente != null)
        {
            if (actual.Siguiente.Placa == placa)
            {
                actual.Siguiente = actual.Siguiente.Siguiente;
                Console.WriteLine("Vehículo eliminado.");
                return;
            }
            actual = actual.Siguiente;
        }

        Console.WriteLine("Vehículo no encontrado.");
    }

    private void MostrarVehiculo(Vehiculo v)
    {
        Console.WriteLine($"Placa: {v.Placa}, Marca: {v.Marca}, Modelo: {v.Modelo}, Año: {v.Año}, Precio: {v.Precio}");
    }
}

// ===============================
// PROGRAMA PRINCIPAL
// ===============================

class Programa
{
    static void Main()
    {
        Console.WriteLine("Seleccione el ejercicio a ejecutar:");
        Console.WriteLine("1. Ejercicio 4: Lista aleatoria con eliminación por rango");
        Console.WriteLine("2. Ejercicio 7: Registro de vehículos");
        Console.Write("Opción: ");
        int opcion = int.Parse(Console.ReadLine());

        switch (opcion)
        {
            case 1:
                EjecutarEjercicio4();
                break;
            case 2:
                EjecutarEjercicio7();
                break;
            default:
                Console.WriteLine("Opción inválida.");
                break;
        }
    }

    static void EjecutarEjercicio4()
    {
        ListaEnlazada lista = new ListaEnlazada();
        Random rnd = new Random();

        for (int i = 0; i < 50; i++)
            lista.Agregar(rnd.Next(1, 1000));

        Console.WriteLine("\nLista original:");
        lista.Mostrar();

        Console.Write("\nIngrese el valor mínimo permitido: ");
        int minimo = int.Parse(Console.ReadLine());

        Console.Write("Ingrese el valor máximo permitido: ");
        int maximo = int.Parse(Console.ReadLine());

        lista.EliminarFueraDeRango(minimo, maximo);

        Console.WriteLine("\nLista luego de eliminar los nodos fuera del rango:");
        lista.Mostrar();
    }

    static void EjecutarEjercicio7()
    {
        ListaVehiculos lista = new ListaVehiculos();
        int opcion;

        do
        {
            Console.WriteLine("\n--- MENÚ VEHÍCULOS ---");
            Console.WriteLine("1. Agregar vehículo");
            Console.WriteLine("2. Buscar por placa");
            Console.WriteLine("3. Ver por año");
            Console.WriteLine("4. Ver todos");
            Console.WriteLine("5. Eliminar por placa");
            Console.WriteLine("0. Salir");
            Console.Write("Seleccione una opción: ");
            opcion = int.Parse(Console.ReadLine());

            switch (opcion)
            {
                case 1:
                    Console.Write("Placa: "); string placa = Console.ReadLine();
                    Console.Write("Marca: "); string marca = Console.ReadLine();
                    Console.Write("Modelo: "); string modelo = Console.ReadLine();
                    Console.Write("Año: "); int año = int.Parse(Console.ReadLine());
                    Console.Write("Precio: "); double precio = double.Parse(Console.ReadLine());
                    lista.AgregarVehiculo(placa, marca, modelo, año, precio);
                    break;

                case 2:
                    Console.Write("Ingrese la placa: ");
                    lista.BuscarPorPlaca(Console.ReadLine());
                    break;

                case 3:
                    Console.Write("Ingrese el año: ");
                    lista.VerPorAño(int.Parse(Console.ReadLine()));
                    break;

                case 4:
                    lista.VerTodos();
                    break;

                case 5:
                    Console.Write("Ingrese la placa a eliminar: ");
                    lista.EliminarPorPlaca(Console.ReadLine());
                    break;

                case 0:
                    Console.WriteLine("Saliendo...");
                    break;

                default:
                    Console.WriteLine("Opción inválida.");
                    break;
            }

        } while (opcion != 0);
    }
}
